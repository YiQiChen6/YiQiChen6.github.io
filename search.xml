<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>nginx</title>
    <url>/posts/a477be03/</url>
    <content><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h2><p>使用了最小化的系统，需要提前安装一些常用工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install vim                <span class="comment">#安装vim编辑器</span></span><br><span class="line">yum list | grep bash                <span class="comment">#查询名字和bash有关的软件包</span></span><br><span class="line">yum -y install bash-completion        <span class="comment">#安装支持tab键的软件包，装好之后，使用exit退出，重新登录才生效</span></span><br><span class="line">Yum -y install net-tools            <span class="comment">#安装网络相关软件包</span></span><br><span class="line">yum -y install tar            <span class="comment">#安装支持tar命令的软件</span></span><br><span class="line">然后将lnmp_soft.tar.gz 传入虚拟机的root家目录</span><br><span class="line">情况一，教室环境：</span><br><span class="line">scp  $教学资料目录/lnmp_soft.tar.gz  192.168.99.5:</span><br><span class="line">情况二，非教室环境：</span><br><span class="line">使用WindTerm或MobaXterm等工具拖拽</span><br></pre></td></tr></table></figure>

<h2 id="2-案例1：搭建Nginx服务器"><a href="#2-案例1：搭建Nginx服务器" class="headerlink" title="2 案例1：搭建Nginx服务器"></a>2 案例1：搭建Nginx服务器</h2><h3 id="2-1-问题"><a href="#2-1-问题" class="headerlink" title="2.1 问题"></a>2.1 问题</h3><p>在IP地址为192.168.99.5的主机上安装部署Nginx服务，并可以将Nginx服务器，要求编译时启用如下功能：</p>
<ul>
<li>支持SSL加密功能</li>
<li>设置Nginx账户及组名称均为nginx</li>
</ul>
<p>然后客户端访问页面验证Nginx Web服务器：</p>
<ul>
<li>使用火狐浏览器访问</li>
<li>使用curl访问</li>
</ul>
<h3 id="2-2-方案"><a href="#2-2-方案" class="headerlink" title="2.2 方案"></a>2.2 方案</h3><p>提前准备运维课程所需的所有虚拟机，为后续所有实验做准备</p>
<p><img src="C:\Users\cyq\AppData\Roaming\Typora\typora-user-images\image-20240708111037089.png" alt="image-20240708111037089"></p>
<p>第一天课程需要使用2台虚拟机，其中一台作为Nginx服务器（proxy）、另外一台作为测试用的客户机（client）</p>
<h3 id="2-3-步骤"><a href="#2-3-步骤" class="headerlink" title="2.3 步骤"></a>2.3 步骤</h3><p>实现此案例需要按照如下步骤进行。</p>
<p><strong>步骤一：构建Nginx服务器</strong></p>
<p>1）使用源码包安装nginx软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># yum -y install gcc make            #安装编译工具</span></span><br><span class="line">[root@proxy ~]<span class="comment"># yum -y install pcre-devel            #正则表达式依赖包</span></span><br><span class="line">[root@proxy ~]<span class="comment"># yum -y install openssl-devel        #SSL加密依赖包</span></span><br><span class="line">[root@proxy ~]<span class="comment"># tar  -xf   nginx-1.22.1.tar.gz</span></span><br><span class="line">[root@proxy ~]<span class="comment"># cd  nginx-1.22.1</span></span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment"># ./configure   \</span></span><br><span class="line">--prefix=/usr/local/nginx   \                <span class="comment">#指定安装路径</span></span><br><span class="line">--user=nginx   \                            <span class="comment">#指定用户</span></span><br><span class="line">--group=nginx  \                            <span class="comment">#指定组</span></span><br><span class="line">--with-http_ssl_module                    <span class="comment">#开启SSL加密功能</span></span><br><span class="line"></span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment"># make            #编译</span></span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment"># make install    #安装</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx/                    <span class="comment">#切换目录</span></span><br><span class="line"><span class="built_in">ls</span> /usr/local/nginx/                    <span class="comment">#查看目录</span></span><br></pre></td></tr></table></figure>

<p>conf 配置文件 sbin 主程序</p>
<p>html 网站页面 logs 日志</p>
<p>2）nginx命令的用法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># useradd -s /sbin/nologin nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx                    <span class="comment">#启动服务</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop            <span class="comment">#关闭服务</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload        <span class="comment">#重新加载配置文件</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -V                <span class="comment">#查看软件信息</span></span><br></pre></td></tr></table></figure>

<p>ss命令可以查看系统中启动的端口信息，该命令常用选项如下：</p>
<p>-a显示所有端口的信息</p>
<p>-n以数字格式显示端口号</p>
<p>-t显示TCP连接的端口</p>
<p>-u显示UDP连接的端口</p>
<p>-l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口</p>
<p>-p显示监听端口的服务名称是什么（也就是程序名称）</p>
<p>nginx服务默认通过TCP 80端口监听客户端请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># ss  -anptu  |  grep nginx</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：客户端访问测试</strong></p>
<p>Nginx服务默认首页文档存储目录为&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;，在此目录下默认有一个名为index.html的文件，使用客户端访问测试页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl  stop  firewalld   <span class="comment">#关闭防火墙</span></span><br><span class="line">[root@client ~]<span class="comment"># curl http://192.168.88.5    #如果没有client则访问192.168.99.5</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>另外使用火狐浏览器访问</p>
<h2 id="3-测试页面"><a href="#3-测试页面" class="headerlink" title="3 测试页面"></a>3 测试页面</h2><p>1）测试网站自定义页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment">#echo &quot;abc-test~~~&quot;  &gt;  html/abc.html   #创建新页面</span></span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.99.5/abc.html">http://192.168.99.5/abc.html</a> #访问新页面</p>
<p>火狐访问192.168.99.5&#x2F;abc.html #如果无效，可以按ctrl+f5强制刷新</p>
<p>2）测试成品网站页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># yum -y install unzip     #安装解压缩工具</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># unzip  ~/lnmp_soft/www_template.zip    #解压缩网站模板</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># cp -r  www_template/*  html/     #拷贝网站模板文件到nginx的网页目录，如果有覆盖提示就输入 y 回车</span></span><br></pre></td></tr></table></figure>

<p>最后火狐访问192.168.99.5</p>
<h2 id="4-案例2：用户认证"><a href="#4-案例2：用户认证" class="headerlink" title="4 案例2：用户认证"></a>4 案例2：用户认证</h2><h3 id="4-1-问题"><a href="#4-1-问题" class="headerlink" title="4.1 问题"></a>4.1 问题</h3><p>沿用练习一，通过调整Nginx服务端配置，实现以下目标：</p>
<ol>
<li>访问Web页面需要进行用户认证</li>
<li>用户名为：tom，密码为：123456</li>
</ol>
<h3 id="4-2-方案"><a href="#4-2-方案" class="headerlink" title="4.2 方案"></a>4.2 方案</h3><p>通过Nginx实现Web页面的认证，需要修改Nginx配置文件，在配置文件中添加auth语句实现用户认证。最后使用htpasswd命令创建用户及密码即可，效果如图-1所示。</p>
<p><img src="C:\Users\cyq\AppData\Roaming\Typora\typora-user-images\image-20240708111830119.png" alt="image-20240708111830119"></p>
<h3 id="4-3-步骤"><a href="#4-3-步骤" class="headerlink" title="4.3 步骤"></a>4.3 步骤</h3><p>实现此案例需要按照如下步骤进行。</p>
<p><strong>步骤一：修改Nginx配置文件</strong></p>
<p>1）修改&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">.. ..</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        auth_basic <span class="string">&quot;Input Password:&quot;</span>;                        <span class="comment">#认证提示符信息</span></span><br><span class="line">        auth_basic_user_file  <span class="string">&quot;/usr/local/nginx/pass&quot;</span>;        <span class="comment">#认证的密码文件</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>2）生成密码文件，创建用户及密码</p>
<p>使用htpasswd命令创建账户文件，需要确保系统中已经安装了httpd-tools。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># yum -y install  httpd-tools</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># htpasswd -c /usr/local/nginx/pass   tom        #创建密码文件</span></span><br><span class="line">New password: </span><br><span class="line">Re-<span class="built_in">type</span> new password: </span><br><span class="line">Adding password <span class="keyword">for</span> user tom</span><br></pre></td></tr></table></figure>

<p>3）重新加载配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># /usr/local/nginx/sbin/nginx -s reload    #重新加载配置文件    </span></span><br><span class="line"><span class="comment">#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：</span></span><br><span class="line"><span class="comment">#[error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</span></span><br></pre></td></tr></table></figure>

<p><strong>步骤二：客户端测试</strong></p>
<p>打开浏览器访问<a href="http://192.168.99.5/">http://192.168.99.5。</a></p>
<p>可以看到用户名与密码的对话框，需要通过认证才能看到网页内容</p>
<p>2）追加账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">htpasswd  /usr/local/nginx/pass   jerry      <span class="comment">#追加用户，不使用-c选项</span></span><br><span class="line">New password: </span><br><span class="line">Re-<span class="built_in">type</span> new password: </span><br><span class="line">Adding password <span class="keyword">for</span> user jerry</span><br><span class="line">[root@proxy ~]<span class="comment"># cat /usr/local/nginx/pass</span></span><br></pre></td></tr></table></figure>

<h2 id="5-案例3：基于域名的虚拟主机"><a href="#5-案例3：基于域名的虚拟主机" class="headerlink" title="5 案例3：基于域名的虚拟主机"></a>5 案例3：基于域名的虚拟主机</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><p>配置基于域名的虚拟主机，实现两个基于域名的虚拟主机，域名分别为<a href="http://www.a.com和www.b.com/">www.a.com和www.b.com</a></p>
<h3 id="5-2-步骤"><a href="#5-2-步骤" class="headerlink" title="5.2 步骤"></a>5.2 步骤</h3><p>实现此案例需要按照如下步骤进行。</p>
<p><strong>步骤一：修改配置文件</strong></p>
<p>1）修改Nginx服务配置，添加相关虚拟主机配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">http &#123;</span><br><span class="line">    .. ..</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;                                      <span class="comment">#端口</span></span><br><span class="line">        server_name  www.b.com;                    <span class="comment">#新虚拟主机定义域名</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html_b;                                    <span class="comment">#指定网站根路径</span></span><br><span class="line">            index  index.html index.htm;            <span class="comment">#默认页面</span></span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen  80;                                        <span class="comment">#端口</span></span><br><span class="line">        server_name  www.a.com;                     <span class="comment">#默认的虚拟主机，修改域名</span></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html;                                 <span class="comment">#指定网站根路径</span></span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）创建网站根目录及对应首页文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbin/nginx  -s  reload   <span class="comment">#之后重新加载配置文件，服务必须是开启状态</span></span><br><span class="line"></span><br><span class="line">[root@proxy nginx]<span class="comment"># mkdir html_b     #创建b网站的目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nginx-A~~~&quot;</span>  &gt; html/index.html      <span class="comment">#创建a网站测试页</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nginx-B~~~&quot;</span>  &gt; html_b/index.html    <span class="comment">#创建b网站测试页</span></span><br><span class="line">vim  /etc/hosts    <span class="comment">#修改hosts文件添加ip和域名的映射关系</span></span><br><span class="line">192.168.99.5  www.a.com  www.b.com</span><br><span class="line">curl  www.a.com     <span class="comment">#检测a网站或b网站都可以看到页面</span></span><br></pre></td></tr></table></figure>

<p>另外：</p>
<p>windows环境配置hosts文件</p>
<p>C:\Windows\System32\drivers\etc\hosts</p>
<p>右键—属性—安全—编辑—users—完全控制打钩</p>
<p>然后用文本打开hosts，在最后添加</p>
<p>192.168.99.5 <a href="http://www.a.com/">www.a.com</a> <a href="http://www.b.com/">www.b.com</a></p>
<p><strong>步骤三：其他类型的虚拟主机(选做)</strong></p>
<p>1.基于端口的虚拟主机（参考模板）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8080;                        <span class="comment">#端口</span></span><br><span class="line">        server_name  www.a.com;          <span class="comment">#域名</span></span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8000;                         <span class="comment">#端口</span></span><br><span class="line">        server_name  www.a.com;           <span class="comment">#域名</span></span><br><span class="line">      .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.基于IP的虚拟主机（参考模板）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       192.168.88.5:80;              <span class="comment">#IP地址与端口</span></span><br><span class="line">        server_name  www.a.com;          <span class="comment">#域名</span></span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       192.168.99.5:80;             <span class="comment">#IP地址与端口</span></span><br><span class="line">        server_name  www.a.com;</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-案例4：SSL虚拟主机"><a href="#6-案例4：SSL虚拟主机" class="headerlink" title="6 案例4：SSL虚拟主机"></a>6 案例4：SSL虚拟主机</h2><h3 id="6-1-问题"><a href="#6-1-问题" class="headerlink" title="6.1 问题"></a>6.1 问题</h3><p>配置基于加密网站的虚拟主机，实现以下目标：</p>
<ol>
<li>该站点通过https访问</li>
<li>通过私钥、证书对该站点所有数据加密</li>
</ol>
<h3 id="6-2-方案"><a href="#6-2-方案" class="headerlink" title="6.2 方案"></a>6.2 方案</h3><p>源码安装Nginx时必须使用–with-http_ssl_module参数，启用加密模块，对于需要进行SSL加密处理的站点添加ssl相关指令（设置网站需要的私钥和证书）。</p>
<p>加密算法一般分为对称算法、非对称算法、信息摘要。</p>
<p>对称算法有：AES、DES，主要应用在单机数据加密。</p>
<p>非对称算法有：RSA、DSA，主要应用在网络数据加密。</p>
<p>信息摘要：MD5、sha256，主要应用在数据完整性校验。</p>
<h3 id="6-3-步骤"><a href="#6-3-步骤" class="headerlink" title="6.3 步骤"></a>6.3 步骤</h3><p>实现此案例需要按照如下步骤进行。</p>
<p>步骤一：配置SSL虚拟主机</p>
<p>1）修改Nginx配置文件，设置加密网站的虚拟主机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment">#vim  /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">… …    </span><br><span class="line">server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name            localhost;</span><br><span class="line">        ssl_certificate      cert.pem;            <span class="comment">#这里是证书文件</span></span><br><span class="line">        ssl_certificate_key  cert.key;            <span class="comment">#这里是私钥文件</span></span><br><span class="line">        ssl_session_cache    shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   https;                        <span class="comment">#加密网站根目录</span></span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2）生成私钥与证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment">#openssl genrsa &gt; conf/cert.key            #生成私钥</span></span><br><span class="line">[root@proxy nginx]<span class="comment">#openssl req -x509 -key conf/cert.key &gt; conf/cert.pem    #生成证书,生成过程会询问诸如你在哪个国家之类的问题，可以随意回答</span></span><br><span class="line">Country Name (2 letter code) [XX]:dc    国家名</span><br><span class="line">State or Province Name (full name) []:dc    省份</span><br><span class="line">Locality Name (eg, city) [Default City]:dc     城市</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:dc    公司</span><br><span class="line">Organizational Unit Name (eg, section) []:dc    部门</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:dc    服务器名称</span></span><br><span class="line"><span class="string">Email Address []:dc@dc.com     电子邮件</span></span><br></pre></td></tr></table></figure>

<p>3）重新加载配置</p>
<p>步骤二：客户端验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># mkdir https    #创建安全网站的目录</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># echo &quot;https~~~~ &quot;  &gt; https/index.html     #创建安全网站的页面</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># sbin/nginx    #服务没开的话开服务</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># sbin/nginx -s reload    #已经开了的话重加载配置</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># curl  -k  https://192.168.99.5     #检验，-k是忽略安全风险</span></span><br><span class="line">https~~~~      <span class="comment">#看到这个内容就说明实验成功</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># systemctl stop firewalld    #如果用真机的火狐浏览器测试需要</span></span><br><span class="line">关闭防火墙，然后输入https://192.168.99.5 </span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
