<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈奕淇的博客</title>
  
  <subtitle>知行合一</subtitle>
  <link href="http://yiqichen.com/atom.xml" rel="self"/>
  
  <link href="http://yiqichen.com/"/>
  <updated>2024-08-01T12:32:43.776Z</updated>
  <id>http://yiqichen.com/</id>
  
  <author>
    <name>陈奕淇</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx</title>
    <link href="http://yiqichen.com/posts/a477be03/"/>
    <id>http://yiqichen.com/posts/a477be03/</id>
    <published>2024-08-01T12:32:43.776Z</published>
    <updated>2024-08-01T12:32:43.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-案例1：部署LNMP环境"><a href="#1-案例1：部署LNMP环境" class="headerlink" title="1 案例1：部署LNMP环境"></a>1 案例1：部署LNMP环境</h2><h3 id="1-1-问题"><a href="#1-1-问题" class="headerlink" title="1.1 问题"></a>1.1 问题</h3><p>安装部署LNMP环境实现动态网站解析</p><p>静态网站 在不同环境下访问，网站内容不会变化</p><p>动态网站 在不同环境下访问，网站内容有可能发生变化</p><ul><li>安装部署Nginx、MariaDB、PHP、PHP-FPM；</li><li>启动Nginx、MariaDB、FPM服务；</li><li>并测试LNMP是否工作正常。</li></ul><h3 id="1-2-方案"><a href="#1-2-方案" class="headerlink" title="1.2 方案"></a>1.2 方案</h3><p>目前的网站一般都会有动态和静态数据，默认nginx仅可以处理静态数据，用户访问任何数据都是直接返回对应的文件，如果如果访问的是一个脚本的话，就会导致直接返回一个脚本给用户，而用户没有脚本解释器，也看不懂脚本源代码！网站拓扑如图-1所示。</p><p>因此需要整合LNMP（Linux、Nginx、MySQL、PHP）实现动态网站效果。</p><p><img src="C:\Users\cyq\AppData\Roaming\Typora\typora-user-images\image-20240708135039724.png" alt="image-20240708135039724"></p><p>操作过程中需要安装的软件列表如下：</p><ul><li>nginx</li><li>mariadb、mariadb-server、mariadb-devel</li><li>php、php-fpm、php-mysqlnd</li></ul><p>备注：mariadb（数据库客户端软件）、mariadb-server（数据库服务器软件）、mariadb-devel（其他客户端软件的依赖包）、php（解释器）、php-fpm（进程管理器服务）、php-mysqlnd（PHP的数据库扩展包）。</p><h3 id="1-3-步骤"><a href="#1-3-步骤" class="headerlink" title="1.3 步骤"></a>1.3 步骤</h3><p>实现此案例需要按照如下步骤进行。</p><p><strong>步骤一：安装软件</strong></p><p>1）使用yum安装基础依赖包</p><p>为了不受到之前实验的影响，可以先删除nginx，重安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment">#killall nginx  #停止nginx程序</span></span><br><span class="line">[root@proxy nginx]<span class="comment">#cd  /root/lnmp_soft/nginx-1.22.1</span></span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment">#rm -rf  /usr/local/nginx    #删除nginx原有目录</span></span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment"># yum -y install gcc make openssl-devel pcre-devel</span></span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment"># ./configure   \</span></span><br><span class="line">&gt; --user=nginx   --group=nginx   \</span><br><span class="line">&gt; --with-http_ssl_module</span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">.. ..</span><br></pre></td></tr></table></figure><p>3）安装MariaDB</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># yum -y install   mariadb   mariadb-server   mariadb-devel</span></span><br></pre></td></tr></table></figure><p>4）php和php-fpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># yum -y  install  php   php-mysqlnd</span></span><br><span class="line">[root@proxy ~]<span class="comment"># yum -y  install  php-fpm</span></span><br></pre></td></tr></table></figure><p><strong>步骤二：启动服务</strong></p><p>1）启动Nginx服务</p><p>如果服务器上已经启动了其他监听80端口的服务（如httpd），则需要先关闭该服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># systemctl stop httpd                   #如果该服务存在则关闭该服务</span></span><br><span class="line">[root@proxy ~]<span class="comment"># /usr/local/nginx/sbin/nginx             #启动Nginx服务</span></span><br><span class="line">[root@proxy ~]<span class="comment"># ss -utnlp | grep :80        </span></span><br></pre></td></tr></table></figure><p>2）启动MySQL服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># systemctl start  mariadb           #启动服务器</span></span><br><span class="line">[root@proxy ~]<span class="comment"># systemctl status mariadb           #查看服务状态</span></span><br><span class="line">[root@proxy ~]<span class="comment"># systemctl enable mariadb           #设置开机启动</span></span><br></pre></td></tr></table></figure><p>3）启动PHP-FPM服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># systemctl start php-fpm           #启动服务</span></span><br><span class="line">[root@proxy ~]<span class="comment"># systemctl status php-fpm          #查看服务状态</span></span><br><span class="line">[root@proxy ~]<span class="comment"># systemctl enable php-fpm          #设置开机启动</span></span><br></pre></td></tr></table></figure><p>4）使用PHP测试页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span>  ~/lnmp_soft/php_scripts/test.php  /usr/local/nginx/html   <span class="comment">#拷贝动态网站测试页面到nginx中</span></span><br></pre></td></tr></table></figure><p>使用浏览器访问192.168.99.5&#x2F;test.php 则无法看到页面内容，而是会当成要下载的文件，因为浏览器无法解析php代码！</p><h2 id="2-案例2：构建LNMP平台"><a href="#2-案例2：构建LNMP平台" class="headerlink" title="2 案例2：构建LNMP平台"></a>2 案例2：构建LNMP平台</h2><h3 id="2-1-问题"><a href="#2-1-问题" class="headerlink" title="2.1 问题"></a>2.1 问题</h3><p>沿用练习一，通过调整Nginx服务端配置，实现以下目标：</p><ol><li>配置Fast-CGI支持PHP网页解析</li></ol><p>Fast-CGI是快速公共（通用）网关接口，可以连接如nginx等网站程序到网站的语言解释器(比如php) ，php-fpm进程使用了Fast-CGI解析动态网站页面</p><ol><li>创建PHP测试页面，测试使用PHP连接数据库的效果</li></ol><h3 id="2-2-方案"><a href="#2-2-方案" class="headerlink" title="2.2 方案"></a>2.2 方案</h3><p>需要延续练习一的实验内容，通过修改Nginx及php-fpm配置文件实现对PHP页面的支持。</p><h3 id="2-3-步骤"><a href="#2-3-步骤" class="headerlink" title="2.3 步骤"></a>2.3 步骤</h3><p>实现此案例需要按照如下步骤进行。</p><p><strong>步骤一： php-fpm配置文件</strong></p><p>1）打开php-fpm配置文件，注意该配置文件中;(分号)是注释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy etc]<span class="comment"># vim /etc/php-fpm.d/www.conf</span></span><br><span class="line">[www]</span><br><span class="line">listen = 127.0.0.1:9000                    <span class="comment">#php-fpm端口号（使用网络通信）</span></span><br><span class="line">;listen = /run/php-fpm/www.sock            <span class="comment">#注释该行</span></span><br><span class="line"></span><br><span class="line">pm.max_children = 50                <span class="comment">#最大进程数量</span></span><br><span class="line">pm.start_servers = 5                <span class="comment">#最小进程数量</span></span><br><span class="line"></span><br><span class="line">[root@proxy etc]<span class="comment">#systemctl restart php-fpm    #重启服务</span></span><br></pre></td></tr></table></figure><p><strong>步骤二：修改Nginx配置文件并启动服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">...</span><br><span class="line"> location  ~  \.php$  &#123;        <span class="comment">#~是使用正则表达式，匹配以.php结尾</span></span><br><span class="line">        root           html;</span><br><span class="line">        fastcgi_pass   127.0.0.1:9000;    <span class="comment">#将请求转发给本机9000端口</span></span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">       <span class="comment">#fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span></span><br><span class="line">        include        fastcgi.conf;       <span class="comment">#加载fastcgi配置文件</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>步骤三：测试LNMP架构能否解析PHP页面</strong></p><p>启动或者重加载nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># /usr/local/nginx/sbin/nginx -s reload</span></span><br><span class="line"><span class="comment">#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：</span></span><br><span class="line"><span class="comment">#[error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</span></span><br></pre></td></tr></table></figure><p>再次使用浏览器访问192.168.99.5&#x2F;test.php 可以看到页面内容！</p><p>2）再测试连接数据库的PHP页面</p><p>可以参考lnmp_soft&#x2F;php_scripts&#x2F;mysql.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span>  ~/lnmp_soft/php_scripts/mysql.php  /usr/local/nginx/html   <span class="comment">#拷贝动态网站测试页面到nginx中</span></span><br></pre></td></tr></table></figure><p>3）客户端使用浏览器访问服务器PHP首页文档，检验是否成功</p><p><a href="http://192.168.99.5/mysql.php">http://192.168.99.5/mysql.php</a></p><p>然后修改数据库内容进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql   <span class="comment">#进入数据库</span></span><br><span class="line">create user dc@localhost identified by <span class="string">&#x27;123&#x27;</span>;   <span class="comment">#创建测试账户</span></span><br><span class="line">quit;  <span class="comment">#退出</span></span><br></pre></td></tr></table></figure><p>再刷新192.168.99.5&#x2F;mysql.php 可以看到新创建的用户</p><p>LNMP常见问题</p><p>如果仅访问ip就能看到动态网站的默认页，可以按下列方法配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.php  index.html   index.htm;</span><br><span class="line"><span class="comment">#设置默认首页为index.php，当用户在浏览器地址栏中只写域名或IP，不说访问什么页面时，服务器会把默认首页index.php返回给用户</span></span><br><span class="line">        &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Nginx的默认访问日志文件为&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;access.log</p><p>Nginx的默认错误日志文件为&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log</p><p>PHP默认错误日志文件为&#x2F;var&#x2F;log&#x2F;php-fpm&#x2F;www-error.log</p><p>如果动态网站访问失败，可用参考错误日志，查找错误信息。</p><p>看到以上test.php、mysql.php两个页面说明nginx不但能支持静态网站，也能解析动态网站了，这种情况也可以记作nginx实现了动静分离</p><h2 id="3-使用socket方式连接php-fpm"><a href="#3-使用socket方式连接php-fpm" class="headerlink" title="3 使用socket方式连接php-fpm"></a>3 使用socket方式连接php-fpm</h2><p>实现此案例需要按照如下步骤进行。</p><p><strong>步骤一： php-fpm配置文件</strong></p><p>1）打开php-fpm配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy etc]<span class="comment"># vim /etc/php-fpm.d/www.conf</span></span><br><span class="line">[www]</span><br><span class="line">;listen = 127.0.0.1:9000                    <span class="comment">#注释或删除该行</span></span><br><span class="line">listen = /run/php-fpm/www.sock                <span class="comment">#socket方式（使用进程通信）</span></span><br><span class="line">listen.acl_users = apache,nginx,nobody        <span class="comment">#添加nobody账户</span></span><br><span class="line"></span><br><span class="line">[root@proxy etc]<span class="comment">#systemctl restart php-fpm    #重启服务</span></span><br></pre></td></tr></table></figure><p><strong>步骤二：修改Nginx配置文件并启动服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">...</span><br><span class="line"> location  ~  \.php$  &#123;                    <span class="comment">#~是使用正则表达式，匹配以.php结尾</span></span><br><span class="line">        root           html;</span><br><span class="line">       <span class="comment">#fastcgi_pass   127.0.0.1:9000;        #注释或删除该行</span></span><br><span class="line">        fastcgi_pass  unix:/run/php-fpm/www.sock;  <span class="comment">#将请求转发给php-fpm进程</span></span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">       <span class="comment">#fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span></span><br><span class="line">        include        fastcgi.conf;            <span class="comment">#加载fastcgi配置文件</span></span><br><span class="line">        &#125;</span><br><span class="line">[root@proxy ~]<span class="comment"># /usr/local/nginx/sbin/nginx -s reload</span></span><br></pre></td></tr></table></figure><h2 id="4-案例3：地址重写"><a href="#4-案例3：地址重写" class="headerlink" title="4 案例3：地址重写"></a>4 案例3：地址重写</h2><h3 id="4-1-问题"><a href="#4-1-问题" class="headerlink" title="4.1 问题"></a>4.1 问题</h3><ol><li>通过调整Nginx服务端配置，实现地址重写功能</li></ol><h3 id="4-2-方案"><a href="#4-2-方案" class="headerlink" title="4.2 方案"></a>4.2 方案</h3><p>关于Nginx服务器的地址重写，主要用到的配置参数是rewrite</p><ul><li>rewrite regex replacement flag</li><li>rewrite 旧地址 新地址 [选项]</li></ul><h3 id="4-3-步骤"><a href="#4-3-步骤" class="headerlink" title="4.3 步骤"></a>4.3 步骤</h3><p>实现此案例需要按照如下步骤进行。</p><p><strong>步骤一：修改配置文件(访问a.html重定向到b.html)</strong></p><p>1）修改Nginx服务配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># cp conf/nginx.conf.default conf/nginx.conf    #还原配置文件</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># cp：是否覆盖&quot;conf/nginx.conf&quot;？ y</span></span><br><span class="line"></span><br><span class="line">[root@proxy nginx]<span class="comment"># vim conf/nginx.conf</span></span><br><span class="line">.. ..</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        rewrite  /a.html  /b.html;            </span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@proxy ~]<span class="comment"># echo &quot;nginx-B~~&quot; &gt; /usr/local/nginx/html/b.html</span></span><br></pre></td></tr></table></figure><p>2）重新加载配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># /usr/local/nginx/sbin/nginx  -s  reload</span></span><br></pre></td></tr></table></figure><p>3）客户端测试</p><p><a href="http://192.168.99.5/a.html">http://192.168.99.5/a.html</a></p><p><strong>步骤二：测试redirect选项</strong></p><p>1）修改Nginx服务配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">.. ..</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        rewrite ^/a.html$  /b.html  redirect;            </span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）重新加载配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># /usr/local/nginx/sbin/nginx  -s  reload</span></span><br></pre></td></tr></table></figure><p>3）客户端测试，地址栏同时发生变化</p><p><a href="http://192.168.99.5/a.html">http://192.168.99.5/a.html</a></p><p><strong>步骤三：不同网站间跳转</strong></p><p>修改Nginx服务配置实现访问192.168.99.5的请求重定向至<a href="http://www.tmooc.cn/">www.tmooc.cn</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">.. ..</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">    rewrite /  http://www.tmooc.cn/;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）重新加载配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># /usr/local/nginx/sbin/nginx  -s  reload</span></span><br></pre></td></tr></table></figure><p>3）客户端测试</p><p><a href="http://192.168.99.5/">http://192.168.99.5</a></p><p><strong>步骤四：修改配置文件(访问192.168.99.5&#x2F;下面子页面，重定向至<a href="http://www.tmooc.cn/%E4%B8%8B%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AD%90%E9%A1%B5%E9%9D%A2">www.tmooc.cn/下相同的子页面</a>)</strong></p><ol><li>修改Nginx服务配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line">.. ..</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">    rewrite  /(.*)  http://www.tmooc.cn/<span class="variable">$1</span>;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）重新加载配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># /usr/local/nginx/sbin/nginx  -s  reload</span></span><br></pre></td></tr></table></figure><p>3）客户端测试</p><p><a href="http://192.168.99.5/test">http://192.168.99.5/test</a></p><p>步骤五：实现不同浏览器跳转到不同页面</p><ol><li>创建网页目录以及对应的页面文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># mkdir  html/firefox</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># echo  firefox~~  &gt;  html/firefox/abc.html   #火狐专用页面</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># echo  others~~  &gt;  html/abc.html            #其他浏览器专用页面</span></span><br></pre></td></tr></table></figure><p>火狐访问192.168.99.5&#x2F;abc.html时可以看到html&#x2F;firefox&#x2F;abc.html里面内容</p><p>其他浏览器访问192.168.99.5&#x2F;abc.html时可以看到html&#x2F;abc.html里面内容</p><ol start="2"><li>修改Nginx服务配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">.. ..</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* firefox) &#123;        <span class="comment">#如果用户使用了火狐浏览器</span></span><br><span class="line">rewrite (.*)  /firefox/<span class="variable">$1</span>;        <span class="comment">#就进行地址重写，让用户看到火狐专用页面$http_user_agent是nginx的内置变量，存储了用户的信息，比如用的什么浏览器,~是匹配正则  *是忽略大小写</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）重新加载配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># /usr/local/nginx/sbin/nginx  -s  reload</span></span><br></pre></td></tr></table></figure><p>4）客户端测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分别用火狐浏览器与其他浏览器访问相同地址http://192.168.99.5/abc.html，可以得到不同结果</span><br></pre></td></tr></table></figure><h2 id="5-地址重写的选项"><a href="#5-地址重写的选项" class="headerlink" title="5 地址重写的选项"></a>5 地址重写的选项</h2><p>redirect 临时重定向，状态码302，爬虫不更新URI</p><p>permanent 永久重定向，状态码301，爬虫更新URI</p><p>last 不再读其他语句，但还会继续匹配其他location语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;nginx-c~~&quot;</span>  &gt;   html/c.html        <span class="comment">#准备素材c页面</span></span><br><span class="line">rewrite  /a.html  /b.html  last;        <span class="comment">#没有其他location语句时，打开b页面</span></span><br><span class="line">rewrite  /b.html  /c.html ;</span><br></pre></td></tr></table></figure><p>break 不再读其他语句，结束请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        location / &#123;                <span class="comment">#此处为默认的location</span></span><br><span class="line">rewrite /a.html /b.html <span class="built_in">break</span>;        <span class="comment">#break可以阻止后面的语句            </span></span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">location /b.html &#123;                <span class="comment">#这里是新添加的location</span></span><br><span class="line">rewrite /b.html /c.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">首页的概述，正文内容不会显示</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yiqichen.com/posts/16107/"/>
    <id>http://yiqichen.com/posts/16107/</id>
    <published>2024-08-01T12:32:43.776Z</published>
    <updated>2024-08-01T12:32:43.776Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><span id="more"></span><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="http://yiqichen.com/posts/a477be03/"/>
    <id>http://yiqichen.com/posts/a477be03/</id>
    <published>2024-07-30T16:00:00.000Z</published>
    <updated>2024-08-01T12:32:43.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h2><p>使用了最小化的系统，需要提前安装一些常用工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum -y install vim                <span class="comment">#安装vim编辑器</span></span><br><span class="line">yum list | grep bash                <span class="comment">#查询名字和bash有关的软件包</span></span><br><span class="line">yum -y install bash-completion        <span class="comment">#安装支持tab键的软件包，装好之后，使用exit退出，重新登录才生效</span></span><br><span class="line">Yum -y install net-tools            <span class="comment">#安装网络相关软件包</span></span><br><span class="line">yum -y install tar            <span class="comment">#安装支持tar命令的软件</span></span><br><span class="line">然后将lnmp_soft.tar.gz 传入虚拟机的root家目录</span><br><span class="line">情况一，教室环境：</span><br><span class="line">scp  $教学资料目录/lnmp_soft.tar.gz  192.168.99.5:</span><br><span class="line">情况二，非教室环境：</span><br><span class="line">使用WindTerm或MobaXterm等工具拖拽</span><br></pre></td></tr></table></figure><h2 id="2-案例1：搭建Nginx服务器"><a href="#2-案例1：搭建Nginx服务器" class="headerlink" title="2 案例1：搭建Nginx服务器"></a>2 案例1：搭建Nginx服务器</h2><h3 id="2-1-问题"><a href="#2-1-问题" class="headerlink" title="2.1 问题"></a>2.1 问题</h3><p>在IP地址为192.168.99.5的主机上安装部署Nginx服务，并可以将Nginx服务器，要求编译时启用如下功能：</p><ul><li>支持SSL加密功能</li><li>设置Nginx账户及组名称均为nginx</li></ul><p>然后客户端访问页面验证Nginx Web服务器：</p><ul><li>使用火狐浏览器访问</li><li>使用curl访问</li></ul><h3 id="2-2-方案"><a href="#2-2-方案" class="headerlink" title="2.2 方案"></a>2.2 方案</h3><p>提前准备运维课程所需的所有虚拟机，为后续所有实验做准备</p><p><img src="C:\Users\cyq\AppData\Roaming\Typora\typora-user-images\image-20240708111037089.png" alt="image-20240708111037089"></p><p>第一天课程需要使用2台虚拟机，其中一台作为Nginx服务器（proxy）、另外一台作为测试用的客户机（client）</p><h3 id="2-3-步骤"><a href="#2-3-步骤" class="headerlink" title="2.3 步骤"></a>2.3 步骤</h3><p>实现此案例需要按照如下步骤进行。</p><p><strong>步骤一：构建Nginx服务器</strong></p><p>1）使用源码包安装nginx软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy ~]<span class="comment"># yum -y install gcc make            #安装编译工具</span></span><br><span class="line">[root@proxy ~]<span class="comment"># yum -y install pcre-devel            #正则表达式依赖包</span></span><br><span class="line">[root@proxy ~]<span class="comment"># yum -y install openssl-devel        #SSL加密依赖包</span></span><br><span class="line">[root@proxy ~]<span class="comment"># tar  -xf   nginx-1.22.1.tar.gz</span></span><br><span class="line">[root@proxy ~]<span class="comment"># cd  nginx-1.22.1</span></span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment"># ./configure   \</span></span><br><span class="line">--prefix=/usr/local/nginx   \                <span class="comment">#指定安装路径</span></span><br><span class="line">--user=nginx   \                            <span class="comment">#指定用户</span></span><br><span class="line">--group=nginx  \                            <span class="comment">#指定组</span></span><br><span class="line">--with-http_ssl_module                    <span class="comment">#开启SSL加密功能</span></span><br><span class="line"></span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment"># make            #编译</span></span><br><span class="line">[root@proxy nginx-1.22.1]<span class="comment"># make install    #安装</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local/nginx/                    <span class="comment">#切换目录</span></span><br><span class="line"><span class="built_in">ls</span> /usr/local/nginx/                    <span class="comment">#查看目录</span></span><br></pre></td></tr></table></figure><p>conf 配置文件 sbin 主程序</p><p>html 网站页面 logs 日志</p><p>2）nginx命令的用法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># useradd -s /sbin/nologin nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx                    <span class="comment">#启动服务</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop            <span class="comment">#关闭服务</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload        <span class="comment">#重新加载配置文件</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -V                <span class="comment">#查看软件信息</span></span><br></pre></td></tr></table></figure><p>ss命令可以查看系统中启动的端口信息，该命令常用选项如下：</p><p>-a显示所有端口的信息</p><p>-n以数字格式显示端口号</p><p>-t显示TCP连接的端口</p><p>-u显示UDP连接的端口</p><p>-l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口</p><p>-p显示监听端口的服务名称是什么（也就是程序名称）</p><p>nginx服务默认通过TCP 80端口监听客户端请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># ss  -anptu  |  grep nginx</span></span><br></pre></td></tr></table></figure><p><strong>步骤二：客户端访问测试</strong></p><p>Nginx服务默认首页文档存储目录为&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;，在此目录下默认有一个名为index.html的文件，使用客户端访问测试页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl  stop  firewalld   <span class="comment">#关闭防火墙</span></span><br><span class="line">[root@client ~]<span class="comment"># curl http://192.168.88.5    #如果没有client则访问192.168.99.5</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>另外使用火狐浏览器访问</p><h2 id="3-测试页面"><a href="#3-测试页面" class="headerlink" title="3 测试页面"></a>3 测试页面</h2><p>1）测试网站自定义页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment">#echo &quot;abc-test~~~&quot;  &gt;  html/abc.html   #创建新页面</span></span><br></pre></td></tr></table></figure><p><a href="http://192.168.99.5/abc.html">http://192.168.99.5/abc.html</a> #访问新页面</p><p>火狐访问192.168.99.5&#x2F;abc.html #如果无效，可以按ctrl+f5强制刷新</p><p>2）测试成品网站页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># yum -y install unzip     #安装解压缩工具</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># unzip  ~/lnmp_soft/www_template.zip    #解压缩网站模板</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># cp -r  www_template/*  html/     #拷贝网站模板文件到nginx的网页目录，如果有覆盖提示就输入 y 回车</span></span><br></pre></td></tr></table></figure><p>最后火狐访问192.168.99.5</p><h2 id="4-案例2：用户认证"><a href="#4-案例2：用户认证" class="headerlink" title="4 案例2：用户认证"></a>4 案例2：用户认证</h2><h3 id="4-1-问题"><a href="#4-1-问题" class="headerlink" title="4.1 问题"></a>4.1 问题</h3><p>沿用练习一，通过调整Nginx服务端配置，实现以下目标：</p><ol><li>访问Web页面需要进行用户认证</li><li>用户名为：tom，密码为：123456</li></ol><h3 id="4-2-方案"><a href="#4-2-方案" class="headerlink" title="4.2 方案"></a>4.2 方案</h3><p>通过Nginx实现Web页面的认证，需要修改Nginx配置文件，在配置文件中添加auth语句实现用户认证。最后使用htpasswd命令创建用户及密码即可，效果如图-1所示。</p><p><img src="C:\Users\cyq\AppData\Roaming\Typora\typora-user-images\image-20240708111830119.png" alt="image-20240708111830119"></p><h3 id="4-3-步骤"><a href="#4-3-步骤" class="headerlink" title="4.3 步骤"></a>4.3 步骤</h3><p>实现此案例需要按照如下步骤进行。</p><p><strong>步骤一：修改Nginx配置文件</strong></p><p>1）修改&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">.. ..</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        auth_basic <span class="string">&quot;Input Password:&quot;</span>;                        <span class="comment">#认证提示符信息</span></span><br><span class="line">        auth_basic_user_file  <span class="string">&quot;/usr/local/nginx/pass&quot;</span>;        <span class="comment">#认证的密码文件</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2）生成密码文件，创建用户及密码</p><p>使用htpasswd命令创建账户文件，需要确保系统中已经安装了httpd-tools。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># yum -y install  httpd-tools</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># htpasswd -c /usr/local/nginx/pass   tom        #创建密码文件</span></span><br><span class="line">New password: </span><br><span class="line">Re-<span class="built_in">type</span> new password: </span><br><span class="line">Adding password <span class="keyword">for</span> user tom</span><br></pre></td></tr></table></figure><p>3）重新加载配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># /usr/local/nginx/sbin/nginx -s reload    #重新加载配置文件    </span></span><br><span class="line"><span class="comment">#请先确保nginx是启动状态，否则运行该命令会报错,报错信息如下：</span></span><br><span class="line"><span class="comment">#[error] open() &quot;/usr/local/nginx/logs/nginx.pid&quot; failed (2: No such file or directory)</span></span><br></pre></td></tr></table></figure><p><strong>步骤二：客户端测试</strong></p><p>打开浏览器访问<a href="http://192.168.99.5/">http://192.168.99.5。</a></p><p>可以看到用户名与密码的对话框，需要通过认证才能看到网页内容</p><p>2）追加账户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">htpasswd  /usr/local/nginx/pass   jerry      <span class="comment">#追加用户，不使用-c选项</span></span><br><span class="line">New password: </span><br><span class="line">Re-<span class="built_in">type</span> new password: </span><br><span class="line">Adding password <span class="keyword">for</span> user jerry</span><br><span class="line">[root@proxy ~]<span class="comment"># cat /usr/local/nginx/pass</span></span><br></pre></td></tr></table></figure><h2 id="5-案例3：基于域名的虚拟主机"><a href="#5-案例3：基于域名的虚拟主机" class="headerlink" title="5 案例3：基于域名的虚拟主机"></a>5 案例3：基于域名的虚拟主机</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><p>配置基于域名的虚拟主机，实现两个基于域名的虚拟主机，域名分别为<a href="http://www.a.com和www.b.com/">www.a.com和www.b.com</a></p><h3 id="5-2-步骤"><a href="#5-2-步骤" class="headerlink" title="5.2 步骤"></a>5.2 步骤</h3><p>实现此案例需要按照如下步骤进行。</p><p><strong>步骤一：修改配置文件</strong></p><p>1）修改Nginx服务配置，添加相关虚拟主机配置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">http &#123;</span><br><span class="line">    .. ..</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;                                      <span class="comment">#端口</span></span><br><span class="line">        server_name  www.b.com;                    <span class="comment">#新虚拟主机定义域名</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html_b;                                    <span class="comment">#指定网站根路径</span></span><br><span class="line">            index  index.html index.htm;            <span class="comment">#默认页面</span></span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen  80;                                        <span class="comment">#端口</span></span><br><span class="line">        server_name  www.a.com;                     <span class="comment">#默认的虚拟主机，修改域名</span></span><br><span class="line">        location / &#123; </span><br><span class="line">            root   html;                                 <span class="comment">#指定网站根路径</span></span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）创建网站根目录及对应首页文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sbin/nginx  -s  reload   <span class="comment">#之后重新加载配置文件，服务必须是开启状态</span></span><br><span class="line"></span><br><span class="line">[root@proxy nginx]<span class="comment"># mkdir html_b     #创建b网站的目录</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nginx-A~~~&quot;</span>  &gt; html/index.html      <span class="comment">#创建a网站测试页</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nginx-B~~~&quot;</span>  &gt; html_b/index.html    <span class="comment">#创建b网站测试页</span></span><br><span class="line">vim  /etc/hosts    <span class="comment">#修改hosts文件添加ip和域名的映射关系</span></span><br><span class="line">192.168.99.5  www.a.com  www.b.com</span><br><span class="line">curl  www.a.com     <span class="comment">#检测a网站或b网站都可以看到页面</span></span><br></pre></td></tr></table></figure><p>另外：</p><p>windows环境配置hosts文件</p><p>C:\Windows\System32\drivers\etc\hosts</p><p>右键—属性—安全—编辑—users—完全控制打钩</p><p>然后用文本打开hosts，在最后添加</p><p>192.168.99.5 <a href="http://www.a.com/">www.a.com</a> <a href="http://www.b.com/">www.b.com</a></p><p><strong>步骤三：其他类型的虚拟主机(选做)</strong></p><p>1.基于端口的虚拟主机（参考模板）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       8080;                        <span class="comment">#端口</span></span><br><span class="line">        server_name  www.a.com;          <span class="comment">#域名</span></span><br><span class="line">        ......</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8000;                         <span class="comment">#端口</span></span><br><span class="line">        server_name  www.a.com;           <span class="comment">#域名</span></span><br><span class="line">      .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.基于IP的虚拟主机（参考模板）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       192.168.88.5:80;              <span class="comment">#IP地址与端口</span></span><br><span class="line">        server_name  www.a.com;          <span class="comment">#域名</span></span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       192.168.99.5:80;             <span class="comment">#IP地址与端口</span></span><br><span class="line">        server_name  www.a.com;</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-案例4：SSL虚拟主机"><a href="#6-案例4：SSL虚拟主机" class="headerlink" title="6 案例4：SSL虚拟主机"></a>6 案例4：SSL虚拟主机</h2><h3 id="6-1-问题"><a href="#6-1-问题" class="headerlink" title="6.1 问题"></a>6.1 问题</h3><p>配置基于加密网站的虚拟主机，实现以下目标：</p><ol><li>该站点通过https访问</li><li>通过私钥、证书对该站点所有数据加密</li></ol><h3 id="6-2-方案"><a href="#6-2-方案" class="headerlink" title="6.2 方案"></a>6.2 方案</h3><p>源码安装Nginx时必须使用–with-http_ssl_module参数，启用加密模块，对于需要进行SSL加密处理的站点添加ssl相关指令（设置网站需要的私钥和证书）。</p><p>加密算法一般分为对称算法、非对称算法、信息摘要。</p><p>对称算法有：AES、DES，主要应用在单机数据加密。</p><p>非对称算法有：RSA、DSA，主要应用在网络数据加密。</p><p>信息摘要：MD5、sha256，主要应用在数据完整性校验。</p><h3 id="6-3-步骤"><a href="#6-3-步骤" class="headerlink" title="6.3 步骤"></a>6.3 步骤</h3><p>实现此案例需要按照如下步骤进行。</p><p>步骤一：配置SSL虚拟主机</p><p>1）修改Nginx配置文件，设置加密网站的虚拟主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment">#vim  /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">… …    </span><br><span class="line">server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name            localhost;</span><br><span class="line">        ssl_certificate      cert.pem;            <span class="comment">#这里是证书文件</span></span><br><span class="line">        ssl_certificate_key  cert.key;            <span class="comment">#这里是私钥文件</span></span><br><span class="line">        ssl_session_cache    shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   https;                        <span class="comment">#加密网站根目录</span></span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2）生成私钥与证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment">#openssl genrsa &gt; conf/cert.key            #生成私钥</span></span><br><span class="line">[root@proxy nginx]<span class="comment">#openssl req -x509 -key conf/cert.key &gt; conf/cert.pem    #生成证书,生成过程会询问诸如你在哪个国家之类的问题，可以随意回答</span></span><br><span class="line">Country Name (2 letter code) [XX]:dc    国家名</span><br><span class="line">State or Province Name (full name) []:dc    省份</span><br><span class="line">Locality Name (eg, city) [Default City]:dc     城市</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:dc    公司</span><br><span class="line">Organizational Unit Name (eg, section) []:dc    部门</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:dc    服务器名称</span></span><br><span class="line"><span class="string">Email Address []:dc@dc.com     电子邮件</span></span><br></pre></td></tr></table></figure><p>3）重新加载配置</p><p>步骤二：客户端验证</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@proxy nginx]<span class="comment"># mkdir https    #创建安全网站的目录</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># echo &quot;https~~~~ &quot;  &gt; https/index.html     #创建安全网站的页面</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># sbin/nginx    #服务没开的话开服务</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># sbin/nginx -s reload    #已经开了的话重加载配置</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># curl  -k  https://192.168.99.5     #检验，-k是忽略安全风险</span></span><br><span class="line">https~~~~      <span class="comment">#看到这个内容就说明实验成功</span></span><br><span class="line">[root@proxy nginx]<span class="comment"># systemctl stop firewalld    #如果用真机的火狐浏览器测试需要</span></span><br><span class="line">关闭防火墙，然后输入https://192.168.99.5 </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">首页的概述，正文内容不会显示</summary>
    
    
    
    <category term="66" scheme="http://yiqichen.com/categories/66/"/>
    
    
    <category term="network" scheme="http://yiqichen.com/tags/network/"/>
    
  </entry>
  
</feed>
